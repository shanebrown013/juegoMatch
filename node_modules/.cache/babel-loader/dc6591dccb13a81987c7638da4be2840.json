{"ast":null,"code":"var _jsxFileName = \"/Users/shanebrown/CSCE315/Project3_Juego/juego/juego/src/TinderCards.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo, useRef } from \"react\";\nimport TinderCard from \"react-tinder-card\";\nimport { database } from \"./firebase\";\nimport './TinderCards.css';\nimport \"./SwipeButtons.css\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport SportsEsportsIcon from '@material-ui/icons/SportsEsports';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { Link } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TinderCards() {\n  _s();\n\n  useEffect(() => {\n    const unsubscribe = database.collection('USERS').onSnapshot(snapshot => setPeople(snapshot.docs.map(doc => doc.data())));\n    return () => {\n      //cleanup function\n      unsubscribe();\n    };\n  }, []);\n  const [people, setPeople] = useState([]); //\n\n  const [currentIndex, setCurrentIndex] = useState(people.length - 1); // THIS SHOULD BE UPDATE CURRENT INDEX\n\n  const [lastDirection, setLastDirection] = useState();\n  const currentIndexRef = useRef(currentIndex);\n  const currentPersonParam = \"/userstats?\";\n\n  const updateCurrentIndex = val => {\n    setCurrentIndex(val);\n    currentIndexRef.current = val;\n  };\n\n  const childRefs = () => {\n    Array(people.length).fill(0).map(i => /*#__PURE__*/React.createRef()), [];\n  };\n\n  const canGoBack = currentIndex < people.length - 1;\n  const canSwipe = currentIndex >= 0;\n\n  const swiped = (direction, nameToDelete, index) => {\n    setLastDirection(direction);\n    updateCurrentIndex(index - 1);\n  };\n\n  const outOfFrame = (name, idx) => {\n    console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current);\n    currentIndexRef.current >= idx && childRefs[idx].current.restoreCard();\n  };\n\n  const swipe = async dir => {\n    console.log(\"swipe attempted\");\n\n    if (canSwipe && currentIndex < people.length) {\n      console.log(\"swipe entered\");\n      await childRefs[currentIndex].current.swipe(dir); // Swipe the card!\n\n      console.log(\"swipe completed\");\n    }\n  }; // the [] are dependencies on this function - if its blank it only runs once\n  // 1:57:25\n  // console.log(people[0].name);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tinderCards__cardContainer\",\n      children: people.map((person, index) => /*#__PURE__*/_jsxDEV(TinderCard, {\n        className: \"swipe\",\n        preventSwipe: ['up', 'down'],\n        ref: childRefs[index],\n        onSwipe: dir => swiped(dir, person.name, index),\n        onCardLeftScreen: () => outOfFrame(person.name, index),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          style: {\n            backgroundImage: `url(${person.url})`\n          },\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: person.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this)\n      }, person.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"swipeButtons\",\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        className: \"swipeButtons__left\",\n        onClick: () => swipe('left'),\n        children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n          fontSize: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        className: \"swipeButtons__control\",\n        component: Link,\n        to: people.length > 0 && `/userstats/?name=${people.at(currentIndex).name}&chess=${people.at(currentIndex).chess}`,\n        children: /*#__PURE__*/_jsxDEV(SportsEsportsIcon, {\n          fontSize: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        className: \"swipeButtons__right\",\n        onClick: () => swipe('right'),\n        children: /*#__PURE__*/_jsxDEV(FavoriteIcon, {\n          fontSize: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Stats page: \", /*#__PURE__*/_jsxDEV(Link, {\n        to: people.length > 0 && `/userstats/?name=${people.at(currentIndex).name}&chess=${people.at(currentIndex).chess}`,\n        children: people.length > 0 && people.at(currentIndex).name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), lastDirection ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"infoText\",\n      children: [\"You swiped \", lastDirection, \", \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 45\n      }, this), \"now swipe on: \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 31\n      }, this), people.at(currentIndex).name, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 49\n      }, this), \"currentIndex = \", currentIndex]\n    }, lastDirection, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"infoText\",\n      children: [\"Swipe or Click \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 32\n      }, this), \"on \", currentIndex]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TinderCards, \"MBjP+tfrNLUCBCx5oeq+64qL34k=\");\n\n_c = TinderCards;\nexport default TinderCards; // useState -  \n//  - can only be used inside of components \n//  - returns an array of values \n//  - const [value, setValue] --- first element is the state , \n//                                 second element is the function that updates the state\n// useEffect - \n//  - runs when a value changes , for example in a useState hook\n//  - this is called a side effect \n//  - takes in a function\n//  - this function runs everytime the page renders \n//  - the '[]' at the end is a conditional, meaning tht the function only runs when \n//    the variable inside it has changed.\n\nvar _c;\n\n$RefreshReg$(_c, \"TinderCards\");","map":{"version":3,"sources":["/Users/shanebrown/CSCE315/Project3_Juego/juego/juego/src/TinderCards.js"],"names":["React","useState","useEffect","useMemo","useRef","TinderCard","database","CloseIcon","FavoriteIcon","SportsEsportsIcon","IconButton","Link","useParams","TinderCards","unsubscribe","collection","onSnapshot","snapshot","setPeople","docs","map","doc","data","people","currentIndex","setCurrentIndex","length","lastDirection","setLastDirection","currentIndexRef","currentPersonParam","updateCurrentIndex","val","current","childRefs","Array","fill","i","createRef","canGoBack","canSwipe","swiped","direction","nameToDelete","index","outOfFrame","name","idx","console","log","restoreCard","swipe","dir","person","backgroundImage","url","at","chess"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo, useRef } from \"react\";\nimport TinderCard from \"react-tinder-card\";\nimport {database} from \"./firebase\";\nimport './TinderCards.css';\nimport \"./SwipeButtons.css\";\n\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport SportsEsportsIcon from '@material-ui/icons/SportsEsports';\nimport IconButton  from \"@material-ui/core/IconButton\";\nimport {Link} from \"react-router-dom\";\nimport {useParams} from \"react-router-dom\";\n\nfunction TinderCards() {\n    useEffect(() => {\n        const unsubscribe = database\n        .collection('USERS')\n        .onSnapshot(snapshot => ( setPeople(    snapshot.docs.map(doc => doc.data())  )        ) )\n        \n\n        return () =>{\n            //cleanup function\n            unsubscribe();\n        };\n\n    },[]);\n\n    const [people, setPeople] = useState([]); \n\n    //\n    const [currentIndex, setCurrentIndex] = useState(people.length - 1) // THIS SHOULD BE UPDATE CURRENT INDEX\n    const [lastDirection, setLastDirection] = useState()\n    const currentIndexRef = useRef(currentIndex)\n    const currentPersonParam = \"/userstats?\";\n\n    const updateCurrentIndex = (val) => {\n        setCurrentIndex(val)\n        currentIndexRef.current = val\n    }\n\n    const childRefs = () => {\n        Array(people.length)\n            .fill(0)\n            .map((i) => React.createRef()),\n        []\n    }\n    \n    const canGoBack = currentIndex < people.length - 1\n\n    const canSwipe = currentIndex >= 0\n\n    const swiped = (direction, nameToDelete, index) => {\n        setLastDirection(direction)\n        updateCurrentIndex(index - 1)\n    }\n\n    const outOfFrame = (name, idx) => {\n        console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current)\n        currentIndexRef.current >= idx && childRefs[idx].current.restoreCard()\n    }\n\n    const swipe = async (dir) => {\n        console.log(\"swipe attempted\")\n        if (canSwipe && currentIndex < people.length) {\n            console.log(\"swipe entered\")\n            await childRefs[currentIndex].current.swipe(dir) // Swipe the card!\n            console.log(\"swipe completed\")\n        }\n    }\n    \n\n    // the [] are dependencies on this function - if its blank it only runs once\n\n    // 1:57:25\n    // console.log(people[0].name);\n    return(\n        <div>\n            <div className=\"tinderCards__cardContainer\" >\n                {people.map((person,index) => (\n                    <TinderCard \n                        className = \"swipe\" \n                        key={person.name} \n                        preventSwipe={['up','down']} \n                        ref={childRefs[index]}\n                        onSwipe={(dir) => swiped(dir, person.name, index)}\n                        onCardLeftScreen={() => outOfFrame(person.name, index)}\n                    >\n                        <div className=\"card\" style={{ backgroundImage: `url(${person.url})` }} >\n                            <h3>{person.name}</h3>\n                        </div>\n                    </TinderCard>\n                ))}\n            </div>\n            <div className='swipeButtons'>\n                <IconButton className=\"swipeButtons__left\" onClick={() => swipe('left')}>\n                    <CloseIcon fontSize = \"large\" />\n                </IconButton>\n                <IconButton className=\"swipeButtons__control\" component = {Link} to = {people.length > 0 && `/userstats/?name=${people.at(currentIndex).name}&chess=${people.at(currentIndex).chess}`}>\n                    <SportsEsportsIcon fontSize = \"large\" />\n                </IconButton>\n                <IconButton className=\"swipeButtons__right\" onClick={() => swipe('right')}>\n                    <FavoriteIcon fontSize = \"large\" />\n                </IconButton>\n            </div>\n            <h4>Stats page: <Link to = {people.length > 0 && `/userstats/?name=${people.at(currentIndex).name}&chess=${people.at(currentIndex).chess}`}>{people.length > 0 && people.at(currentIndex).name}</Link></h4>\n            {lastDirection ? (\n                <h2 key={lastDirection} className='infoText'>\n                You swiped {lastDirection}, <br/>\n                now swipe on: <br/>\n                 {people.at(currentIndex).name} <br/>\n                 currentIndex = {currentIndex}\n                </h2>\n            ) : (\n                <h2 className='infoText'>\n                Swipe or Click <br/>\n                on {currentIndex}\n                </h2>\n            )}\n        </div> \n    )\n}\n\nexport default TinderCards\n\n// useState -  \n//  - can only be used inside of components \n//  - returns an array of values \n//  - const [value, setValue] --- first element is the state , \n//                                 second element is the function that updates the state\n\n// useEffect - \n//  - runs when a value changes , for example in a useState hook\n//  - this is called a side effect \n//  - takes in a function\n//  - this function runs everytime the page renders \n//  - the '[]' at the end is a conditional, meaning tht the function only runs when \n//    the variable inside it has changed."]},"metadata":{},"sourceType":"module"}