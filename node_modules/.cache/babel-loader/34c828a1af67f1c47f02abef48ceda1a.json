{"ast":null,"code":"var _jsxFileName = \"/Users/shanebrown/CSCE315/Project3_Juego/juego/juego/src/TinderCards.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo, useRef } from \"react\";\nimport TinderCard from \"react-tinder-card\";\nimport { database, UUID } from \"./firebase\";\nimport './TinderCards.css';\nimport \"./SwipeButtons.css\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport SportsEsportsIcon from '@material-ui/icons/SportsEsports';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { Link } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TinderCards() {\n  _s();\n\n  useEffect(() => {\n    const unsubscribe = database.collection('USERS').onSnapshot(snapshot => setPeople(snapshot.docs.map(doc => doc.data())));\n    return () => {\n      //cleanup function\n      unsubscribe();\n    };\n  }, []);\n  const [people, setPeople] = useState([]); //\n\n  const [currentIndex, setCurrentIndex] = useState(people.length - 1); // THIS SHOULD BE UPDATE CURRENT INDEX\n\n  const [lastDirection, setLastDirection] = useState();\n  const currentIndexRef = useRef(currentIndex);\n  const currentPersonParam = \"/userstats?\";\n\n  const updateCurrentIndex = val => {\n    setCurrentIndex(val);\n    currentIndexRef.current = val;\n  };\n\n  const childRefs = useMemo(() => Array(people.length).fill(0).map(i => /*#__PURE__*/React.createRef()), [currentIndex]);\n  const canGoBack = currentIndex < people.length - 1;\n  const canSwipe = currentIndex >= 0;\n  var allMatches = [];\n\n  const pushMatches = allMatches => {\n    database.collection('USERS').doc(UUID).update({\n      \"matches\": allMatches\n    }).then().catch(error => {\n      console.log(\"error1\");\n    });\n  };\n\n  const match = (direction, index) => {\n    console.log(\"onematch: \", people.at(index).name);\n    var word = people.at(index).name + \", \";\n    allMatches.push(word);\n    console.log(\"Pushed into array\", allMatches);\n    pushMatches(allMatches);\n  };\n\n  const swiped = (direction, nameToDelete, index) => {\n    setLastDirection(direction);\n    const directionNew = direction;\n    console.log(\"directionNew\", directionNew);\n\n    if (directionNew == 'right') {\n      match(direction, index);\n    }\n\n    updateCurrentIndex(index - 1);\n  };\n\n  const outOfFrame = (name, idx) => {\n    console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current);\n    currentIndexRef.current >= idx && childRefs[idx].current.restoreCard();\n  };\n\n  const swipe = async dir => {\n    console.log(\"swipe attempted\");\n\n    if (canSwipe && currentIndex < people.length) {\n      console.log(\"swipe entered\");\n      await childRefs[currentIndex].current.swipe(dir); // Swipe the card!\n\n      console.log(\"swipe completed\");\n    }\n  }; // the [] are dependencies on this function - if its blank it only runs once\n  // 1:57:25\n  // console.log(people[0].name);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tinderCards__cardContainer\",\n      children: people.map((person, index) => /*#__PURE__*/_jsxDEV(TinderCard, {\n        className: \"swipe\",\n        preventSwipe: ['up', 'down'],\n        ref: childRefs[index],\n        onSwipe: dir => swiped(dir, person.name, index),\n        onCardLeftScreen: () => outOfFrame(person.name, index),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          style: {\n            backgroundImage: `url(${person.url})`\n          },\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: person.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this)\n      }, person.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"swipeButtons\",\n      children: /*#__PURE__*/_jsxDEV(IconButton, {\n        className: \"swipeButtons__control\",\n        component: Link,\n        to: people.length > 0 && `/userstats/?name=${people.at(currentIndex).name}&chess=${people.at(currentIndex).chess}`,\n        children: /*#__PURE__*/_jsxDEV(SportsEsportsIcon, {\n          fontSize: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TinderCards, \"8U1OiiFb45W7toK/tAbIr8Faw4s=\");\n\n_c = TinderCards;\nexport default TinderCards; // useState -  \n//  - can only be used inside of components \n//  - returns an array of values \n//  - const [value, setValue] --- first element is the state , \n//                                 second element is the function that updates the state\n// useEffect - \n//  - runs when a value changes , for example in a useState hook\n//  - this is called a side effect \n//  - takes in a function\n//  - this function runs everytime the page renders \n//  - the '[]' at the end is a conditional, meaning tht the function only runs when \n//    the variable inside it has changed.\n\nvar _c;\n\n$RefreshReg$(_c, \"TinderCards\");","map":{"version":3,"sources":["/Users/shanebrown/CSCE315/Project3_Juego/juego/juego/src/TinderCards.js"],"names":["React","useState","useEffect","useMemo","useRef","TinderCard","database","UUID","CloseIcon","FavoriteIcon","SportsEsportsIcon","IconButton","Link","useParams","TinderCards","unsubscribe","collection","onSnapshot","snapshot","setPeople","docs","map","doc","data","people","currentIndex","setCurrentIndex","length","lastDirection","setLastDirection","currentIndexRef","currentPersonParam","updateCurrentIndex","val","current","childRefs","Array","fill","i","createRef","canGoBack","canSwipe","allMatches","pushMatches","update","then","catch","error","console","log","match","direction","index","at","name","word","push","swiped","nameToDelete","directionNew","outOfFrame","idx","restoreCard","swipe","dir","person","backgroundImage","url","chess"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,OAArC,EAA8CC,MAA9C,QAA4D,OAA5D;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,SAAQC,QAAR,EAAkBC,IAAlB,QAA6B,YAA7B;AACA,OAAO,mBAAP;AACA,OAAO,oBAAP;AAEA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,OAAOC,UAAP,MAAwB,8BAAxB;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,SAAQC,SAAR,QAAwB,kBAAxB;;;AAEA,SAASC,WAAT,GAAuB;AAAA;;AAEnBZ,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMa,WAAW,GAAGT,QAAQ,CAC3BU,UADmB,CACR,OADQ,EAEnBC,UAFmB,CAERC,QAAQ,IAAMC,SAAS,CAAKD,QAAQ,CAACE,IAAT,CAAcC,GAAd,CAAkBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAzB,CAAL,CAFf,CAApB;AAKA,WAAO,MAAK;AACR;AACAR,MAAAA,WAAW;AACd,KAHD;AAKH,GAXQ,EAWP,EAXO,CAAT;AAaA,QAAM,CAACS,MAAD,EAASL,SAAT,IAAsBlB,QAAQ,CAAC,EAAD,CAApC,CAfmB,CAiBnB;;AACA,QAAM,CAACwB,YAAD,EAAeC,eAAf,IAAkCzB,QAAQ,CAACuB,MAAM,CAACG,MAAP,GAAgB,CAAjB,CAAhD,CAlBmB,CAkBiD;;AACpE,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoC5B,QAAQ,EAAlD;AACA,QAAM6B,eAAe,GAAG1B,MAAM,CAACqB,YAAD,CAA9B;AACA,QAAMM,kBAAkB,GAAG,aAA3B;;AAEA,QAAMC,kBAAkB,GAAIC,GAAD,IAAS;AAChCP,IAAAA,eAAe,CAACO,GAAD,CAAf;AACAH,IAAAA,eAAe,CAACI,OAAhB,GAA0BD,GAA1B;AACH,GAHD;;AAKA,QAAME,SAAS,GAAGhC,OAAO,CACrB,MACEiC,KAAK,CAACZ,MAAM,CAACG,MAAR,CAAL,CACGU,IADH,CACQ,CADR,EAEGhB,GAFH,CAEQiB,CAAD,iBAAOtC,KAAK,CAACuC,SAAN,EAFd,CAFmB,EAKrB,CAACd,YAAD,CALqB,CAAzB;AAQA,QAAMe,SAAS,GAAGf,YAAY,GAAGD,MAAM,CAACG,MAAP,GAAgB,CAAjD;AAEA,QAAMc,QAAQ,GAAGhB,YAAY,IAAI,CAAjC;AAEA,MAAIiB,UAAU,GAAG,EAAjB;;AAEA,QAAMC,WAAW,GAAID,UAAD,IAAgB;AAChCpC,IAAAA,QAAQ,CAACU,UAAT,CAAoB,OAApB,EAA6BM,GAA7B,CAAiCf,IAAjC,EAAuCqC,MAAvC,CAA8C;AAAC,iBAAWF;AAAZ,KAA9C,EAAuEG,IAAvE,GAA8EC,KAA9E,CAAqFC,KAAD,IAAW;AAC/FC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD,KAFC;AAGH,GAJD;;AAOA,QAAMC,KAAK,GAAE,CAACC,SAAD,EAAYC,KAAZ,KAAsB;AAC/BJ,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BzB,MAAM,CAAC6B,EAAP,CAAUD,KAAV,EAAiBE,IAA3C;AACA,QAAIC,IAAI,GAAG/B,MAAM,CAAC6B,EAAP,CAAUD,KAAV,EAAiBE,IAAjB,GAAwB,IAAnC;AACAZ,IAAAA,UAAU,CAACc,IAAX,CAAgBD,IAAhB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCP,UAAjC;AACAC,IAAAA,WAAW,CAACD,UAAD,CAAX;AACH,GAND;;AASA,QAAMe,MAAM,GAAG,CAACN,SAAD,EAAYO,YAAZ,EAA0BN,KAA1B,KAAoC;AAC/CvB,IAAAA,gBAAgB,CAACsB,SAAD,CAAhB;AACA,UAAMQ,YAAY,GAAGR,SAArB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BU,YAA5B;;AACA,QAAGA,YAAY,IAAI,OAAnB,EAA4B;AACxBT,MAAAA,KAAK,CAACC,SAAD,EAAYC,KAAZ,CAAL;AACH;;AACDpB,IAAAA,kBAAkB,CAACoB,KAAK,GAAG,CAAT,CAAlB;AACH,GARD;;AAUA,QAAMQ,UAAU,GAAG,CAACN,IAAD,EAAOO,GAAP,KAAe;AAC9Bb,IAAAA,OAAO,CAACC,GAAR,CAAa,GAAEK,IAAK,KAAIO,GAAI,oBAA5B,EAAiD/B,eAAe,CAACI,OAAjE;AACAJ,IAAAA,eAAe,CAACI,OAAhB,IAA2B2B,GAA3B,IAAkC1B,SAAS,CAAC0B,GAAD,CAAT,CAAe3B,OAAf,CAAuB4B,WAAvB,EAAlC;AACH,GAHD;;AAKA,QAAMC,KAAK,GAAG,MAAOC,GAAP,IAAe;AACzBhB,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;;AACA,QAAIR,QAAQ,IAAIhB,YAAY,GAAGD,MAAM,CAACG,MAAtC,EAA8C;AAC1CqB,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,YAAMd,SAAS,CAACV,YAAD,CAAT,CAAwBS,OAAxB,CAAgC6B,KAAhC,CAAsCC,GAAtC,CAAN,CAF0C,CAEO;;AACjDhB,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACH;AACJ,GAPD,CAzEmB,CAmFnB;AAEA;AACA;;;AACA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA,gBACKzB,MAAM,CAACH,GAAP,CAAW,CAAC4C,MAAD,EAAQb,KAAR,kBACR,QAAC,UAAD;AACI,QAAA,SAAS,EAAG,OADhB;AAGI,QAAA,YAAY,EAAE,CAAC,IAAD,EAAM,MAAN,CAHlB;AAII,QAAA,GAAG,EAAEjB,SAAS,CAACiB,KAAD,CAJlB;AAKI,QAAA,OAAO,EAAGY,GAAD,IAASP,MAAM,CAACO,GAAD,EAAMC,MAAM,CAACX,IAAb,EAAmBF,KAAnB,CAL5B;AAMI,QAAA,gBAAgB,EAAE,MAAMQ,UAAU,CAACK,MAAM,CAACX,IAAR,EAAcF,KAAd,CANtC;AAAA,+BAQI;AAAK,UAAA,SAAS,EAAC,MAAf;AAAsB,UAAA,KAAK,EAAE;AAAEc,YAAAA,eAAe,EAAG,OAAMD,MAAM,CAACE,GAAI;AAArC,WAA7B;AAAA,iCACI;AAAA,sBAAKF,MAAM,CAACX;AAAZ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AARJ,SAESW,MAAM,CAACX,IAFhB;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YADJ,eAiBI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BAII,QAAC,UAAD;AAAY,QAAA,SAAS,EAAC,uBAAtB;AAA8C,QAAA,SAAS,EAAI1C,IAA3D;AAAiE,QAAA,EAAE,EAAIY,MAAM,CAACG,MAAP,GAAgB,CAAhB,IAAsB,oBAAmBH,MAAM,CAAC6B,EAAP,CAAU5B,YAAV,EAAwB6B,IAAK,UAAS9B,MAAM,CAAC6B,EAAP,CAAU5B,YAAV,EAAwB2C,KAAM,EAApL;AAAA,+BACI,QAAC,iBAAD;AAAmB,UAAA,QAAQ,EAAG;AAA9B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,YAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA6CH;;GApIQtD,W;;KAAAA,W;AAsIT,eAAeA,WAAf,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState, useEffect, useMemo, useRef } from \"react\";\nimport TinderCard from \"react-tinder-card\";\nimport {database, UUID} from \"./firebase\";\nimport './TinderCards.css';\nimport \"./SwipeButtons.css\";\n\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport SportsEsportsIcon from '@material-ui/icons/SportsEsports';\nimport IconButton  from \"@material-ui/core/IconButton\";\nimport {Link} from \"react-router-dom\";\nimport {useParams} from \"react-router-dom\";\n\nfunction TinderCards() {\n    \n    useEffect(() => {\n        const unsubscribe = database\n        .collection('USERS')\n        .onSnapshot(snapshot => ( setPeople(    snapshot.docs.map(doc => doc.data())  )        ) )\n        \n\n        return () =>{\n            //cleanup function\n            unsubscribe();\n        };\n\n    },[]);\n\n    const [people, setPeople] = useState([]); \n\n    //\n    const [currentIndex, setCurrentIndex] = useState(people.length - 1) // THIS SHOULD BE UPDATE CURRENT INDEX\n    const [lastDirection, setLastDirection] = useState()\n    const currentIndexRef = useRef(currentIndex)\n    const currentPersonParam = \"/userstats?\";\n\n    const updateCurrentIndex = (val) => {\n        setCurrentIndex(val)\n        currentIndexRef.current = val\n    }\n\n    const childRefs = useMemo(\n        () =>\n          Array(people.length)\n            .fill(0)\n            .map((i) => React.createRef()),\n        [currentIndex]\n      )\n    \n    const canGoBack = currentIndex < people.length - 1\n\n    const canSwipe = currentIndex >= 0\n\n    var allMatches = [];\n\n    const pushMatches = (allMatches) => {\n        database.collection('USERS').doc(UUID).update({\"matches\": allMatches}).then().catch((error) => {\n        console.log(\"error1\")\n      });\n    }\n\n\n    const match =(direction, index) => {\n        console.log(\"onematch: \", people.at(index).name)\n        var word = people.at(index).name + \", \"\n        allMatches.push(word)\n        console.log(\"Pushed into array\", allMatches)\n        pushMatches(allMatches)\n    }\n\n\n    const swiped = (direction, nameToDelete, index) => {\n        setLastDirection(direction)\n        const directionNew = direction;\n        console.log(\"directionNew\", directionNew)\n        if(directionNew == 'right') {\n            match(direction, index)\n        }\n        updateCurrentIndex(index - 1)\n    }\n\n    const outOfFrame = (name, idx) => {\n        console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current)\n        currentIndexRef.current >= idx && childRefs[idx].current.restoreCard()\n    }\n\n    const swipe = async (dir) => {\n        console.log(\"swipe attempted\")\n        if (canSwipe && currentIndex < people.length) {\n            console.log(\"swipe entered\")\n            await childRefs[currentIndex].current.swipe(dir) // Swipe the card!\n            console.log(\"swipe completed\")\n        }\n    }\n    \n\n    // the [] are dependencies on this function - if its blank it only runs once\n\n    // 1:57:25\n    // console.log(people[0].name);\n    return(\n        <div>\n            <div className=\"tinderCards__cardContainer\" >\n                {people.map((person,index) => (\n                    <TinderCard \n                        className = \"swipe\" \n                        key={person.name} \n                        preventSwipe={['up','down']} \n                        ref={childRefs[index]}\n                        onSwipe={(dir) => swiped(dir, person.name, index)}\n                        onCardLeftScreen={() => outOfFrame(person.name, index)}\n                    >\n                        <div className=\"card\" style={{ backgroundImage: `url(${person.url})` }} >\n                            <h3>{person.name}</h3>\n                        </div>\n                    </TinderCard>\n                ))}\n            </div>\n            <div className='swipeButtons'>\n                {/* <IconButton className=\"swipeButtons__left\" onClick={() => swipe('left')}>\n                    <CloseIcon fontSize = \"large\" />\n                </IconButton> */}\n                <IconButton className=\"swipeButtons__control\" component = {Link} to = {people.length > 0 && `/userstats/?name=${people.at(currentIndex).name}&chess=${people.at(currentIndex).chess}`}>\n                    <SportsEsportsIcon fontSize = \"large\" />\n                </IconButton>\n                {/* <IconButton className=\"swipeButtons__right\" onClick={() => swipe('right')}>\n                    <FavoriteIcon fontSize = \"large\" />\n                </IconButton> */}\n            </div>\n            {/* <h4>Stats page: <Link to = {people.length > 0 && `/userstats/?name=${people.at(currentIndex).name}&chess=${people.at(currentIndex).chess}`}>{people.length > 0 && people.at(currentIndex).name}</Link></h4> */}\n            {/* {lastDirection ? (\n                <h2 key={lastDirection} className='infoText'>\n                You swiped {lastDirection}, <br/>\n                now swipe on: <br/>\n                 {people.at(currentIndex).name} <br/>\n                 currentIndex = {currentIndex}\n                </h2>\n            ) : (\n                <h2 className='infoText'>\n                Swipe or Click <br/>\n                on {currentIndex}\n                </h2>\n            )} */}\n        </div> \n    )\n}\n\nexport default TinderCards\n\n// useState -  \n//  - can only be used inside of components \n//  - returns an array of values \n//  - const [value, setValue] --- first element is the state , \n//                                 second element is the function that updates the state\n\n// useEffect - \n//  - runs when a value changes , for example in a useState hook\n//  - this is called a side effect \n//  - takes in a function\n//  - this function runs everytime the page renders \n//  - the '[]' at the end is a conditional, meaning tht the function only runs when \n//    the variable inside it has changed."]},"metadata":{},"sourceType":"module"}